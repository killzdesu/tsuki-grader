#!/usr/bin/env python

import os.path
import sys
import time
import subprocess
from lib.getch import *
from time import localtime, strftime

# --- Parameter check
"""
if(len(sys.argv) != 4 and len(sys.argv) != 5):
    print "usage : judge <language> <source> <task> [<grader-log>]"
    exit(127)
"""

class __grader:
    def __init__(self, nm, pd):
        self.name = nm
        self.pid = pid

GRADER_LOG = 'grader.log'


def logs(msg, echo=True):
    global GRADER_LOG
    log_name = GRADER_LOG
    flog = open(log_name, "a")
    flog.write('@ %s >> %s\n' % (strftime("%H:%M:%S", localtime()), msg))
    if echo:
        print '@ %s >> %s' % (strftime("%H:%M:%S", localtime()), msg)

# --- Seperated
logs("", False)
x=0
grader = {}
pr = lambda x: sys.stdout.write(x)
while True:
    pr("command (h to help) : ")
    inp = getch()
    print inp
    if x > 20:
        break
#    x += 1   -- Infinite
    if inp == 'q':
        break
    elif inp == 'h':
        print "s: start grader"
        print "k: stop grader"
        print "j: judge source"
        print "l: list grader"
        print "i: import problem"
    elif inp == 's':
        pr("Input grader name: ")
        gname = raw_input().strip()
        cmd = ['./grader',gname]
        gd = subprocess.Popen(cmd)
        print "Start grader '%s' by pid %d" % (gname, gd.pid)
        grader[gname]=gd
        time.sleep(0.5)
    elif inp == 'k':
        pr("Input grader name: ")
        gname = raw_input().strip()
        if not gname in grader:
            print "grader '%s' is not running" % gname
            continue
        cmd = "touch %s/stop-%s" % (gname,gname)
        os.system(cmd)
        print "Stoped grader '%s'" % gname
        time.sleep(0.5)
    elif inp == 'l':
        gdel = []
        for gname in grader.iterkeys():
            if grader[gname].poll() != None:
                gdel.append(gname)
        for p in gdel:
            del grader[p]
        for gname in grader.iterkeys():
            print gname, ':', grader[gname].pid
    elif inp == 'i':
        pr("Input taskname: ")
        task_name = raw_input().strip()
#        if os.path.exists('../ev/%s' % task_name):
#            print "ERROR: Task already exists"
#            time.sleep(0.5)
#            continue
        pr("Input test case path: ")
        testcase = raw_input().strip()
#        if not os.path.exists(testcase):
#            print "ERROR: Test data not found!"
#            time.sleep(0.5)
#            continue
        os.system("./import_prob %s %s" % (testcase, task_name))
    else:
        print "Command not found..."
        time.sleep(1.5)
